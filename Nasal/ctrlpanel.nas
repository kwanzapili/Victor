#############################################################################
#
# Handley Page Victor Auto Flight System Control Panel Management
#
#############################################################################

#############################################################################
# Buttons found only on the dialog
#############################################################################

## ------------------------ Flightdiretor ------------------------
##
## An FD is an extremely useful aid that displays cues to guide pilot
## or autopilot control inputs along a selected and computed flightpath.
## The flight data computer integrates all of the data such as speed,
## position, closure, drift, track, desired course, and altitude into
## a command signal.
## The command signal is displayed on the attitude indicator in the form
## of command bars, which show the pitch and roll inputs necessary to
## achieve the selected targets. To use the flight director command bars,
## which are usually shaped as inverted chevrons, or V-shaped symbols, the
## pilot simply flies to the bars. You simply keep the aircraft symbol on
## the attitude indicator aligned with the command bars, or allow the
## autopilot to make the actual control movements to fly the selected
## track and altitude.
## The FD and autopilot systems are designed to work together, but it is
## possible to use the flight director without engaging the autopilot, or
## the autopilot without the FD. Without autopilot engagement, the FD
## presents all processed information to the pilot in the form of command
## bar cues, but you must manually fly the airplane to follow these cues
## to fly the selected flightpath.
## When you engage the autopilot, it simply follows the cues generated by
## the flight director to control the airplane along the selected
## lateral and vertical paths.

var toggle_fd = func() {
    var currFD = fdFDOn.getValue();
    var fltMode = fmcFlightMode.getValue();

    if (fltMode > FlightModes.LIFTOFF) {
	if ( ! currFD ) {
	    setprop("/instrumentation/flightdirector/fd-on", ON);
	} else {
	    setprop("/instrumentation/flightdirector/fd-on", OFF);
	}
	switchWithSound();
    }
}

## revert FD to OFF if the passive mode did not engage
var revert_fd_off = func () {
    var status = fdFDOn.getValue();
    if (status == OFF) {
	stopFD();
	return;
    }

    # check passive lock in a sec
    var t = maketimer(1.0, func {
		var passive = apLocksPassive.getValue();
		if (passive == PassiveMode.OFF) {
		    setprop("/instrumentation/flightdirector/fd-on", OFF);
		} else {
		    initFD();
		}
	    });
    t.singleShot = TRUE;
    t.start();
}

setlistener("/instrumentation/flightdirector/fd-on", revert_fd_off, 0, 0);


##
## +++++++++++++++++++++++++++ MANAGED MODE FUNCTIONS ++++++++++++++++++++++++++
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

## toggle the lataral mode
var toggle_lat_mode = func () {
    var current = fdLatMode.getValue();
    var step = -2 * current - 1;
    # note that "step" will either be -1 (current = 0) or otherwise 1 (current = -1)
    set_lateral_mode(step);
}

## toggle the vertical ALT mode
var toggle_vert_alt_mode = func () {
    var current = fdAltMode.getValue();
    var step = -2 * current - 1;
    # note that "step" will either be -1 (current = 0) or otherwise 1 (current = -1)
    set_vert_alt_mode(step);
}

## toggle the vertical VS mode
var toggle_vert_vs_mode = func () {
    var current = fdVsMode.getValue();
    var step = -2 * current - 1;
    # note that "step" will either be -1 (current = 0) or otherwise 1 (current = -1)
    set_vert_vs_mode(step);
}

## toggle the SPEED mode
var toggle_speed_mode = func () {
    var current = fdSpdMode.getValue();
    var step = -2 * current - 1;
    # note that "step" will either be -1 (current = 0) or otherwise 1 (current = -1)
    set_speed_mode(step);
}

##
## +++++++++++++++++++++++++++++ AUTOLAND FUNCTIONS ++++++++++++++++++++++++++++
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

##
## -------------------- LOC --------------------
##

## For LOC we use a three step procedure:
##   1. First "loc-on" is switched ON
##   2. This triggers "loc-arm" ON if some preconditions are met
##   3. Finally, "loc-enable" is triggered ON when further preconditions are met
## To disable LOC, the procedure is:
##   1. Switch "loc-on" OFF so that "loc-enable" cannot be triggered ON again
##   2. Switch "lnav" to LEVEL for example
##   3. Now switch OFF "loc-on"
## Once "loc-on" is OFF, neither "loc-arm" nor "loc-enable" can be ON

## disengage LOC
var disengageLOC = func () {
    var curHead = apLocksHdg.getValue();

    if (curHead == "nav1-hold") { # set wing-level mode
	set_wl_mode();
    }
}

var engageLOC = func () {
    # check after a sec that the arming was accepted
    var t = maketimer(1.0, func {
		var armed = fdLocArm.getValue();
		var enabled = fdLocEnable.getValue();
		if (armed == OFF and enabled == OFF)
		    setprop("/instrumentation/flightdirector/loc-on", OFF);
	    });
    t.singleShot = TRUE;
    t.start();
}

var toggle_loc = func () {
    var locOn = fdLocOn.getValue();

    if ( locOn == ON) {
	setprop("/instrumentation/flightdirector/loc-on", OFF);
    } else {
	var apOn    = fdAPEngage.getValue();
	var inRange = getprop("/instrumentation/nav[0]/in-range");
	if ( apOn == FALSE or inRange == FALSE )
	    setprop("/instrumentation/flightdirector/loc-on", OFF);
	else setprop("/instrumentation/flightdirector/loc-on", ON);
    }
    switchWithSound();
}

setlistener("/instrumentation/flightdirector/loc-on", func (n) {
    if (n.getValue() == ON)     engageLOC();
    else        disengageLOC();
}, 0, 0);

##
## -------------------- Approach --------------------
##

## For APPR we use a three step procedure:
##   1. First "appr-on" is switched ON
##   2. This triggers "appr-arm" ON if some preconditions are met
##   3. Finally, "appr-enable" is triggered ON when further preconditions are met
## To disable APPR, the procedure is:
##   1. Switch "appr-on" OFF so that "appr-enable" cannot be triggered ON again
##   2. Switch "vnav" to OFF
##   3. Now switch OFF "appr-on"
## Once "appr-on" is OFF, neither "appr-arm" nor "appr-enable" can be ON

## disengage APPR
var disengageAPPR= func () {
    var mode = apLocksAlt.getValue();

    if (mode == "gs1-hold") {
	setVNAV(VNAV.OFF);
    }
}

## engage APPR
var engageAPPR = func () {
# check after a sec that the arming was accepted
    var t = maketimer(1.0, func {
		var armed = fdApprArm.getValue();
		var enabled = fdApprEnable.getValue();
		if (armed == OFF and enabled == OFF)
		    setprop("/instrumentation/flightdirector/appr-on", OFF);
	    });
    t.singleShot = TRUE;
    t.start();
}

var toggle_appr = func () {
    var apprOn = fdApprOn.getValue();

    if ( apprOn == ON ) {
	setprop("/instrumentation/flightdirector/appr-on", OFF);
    } else {
	var apOn    = fdAPEngage.getValue();
	var inRange = getprop("/instrumentation/nav[0]/gs-in-range");
	if ( apOn == FALSE or inRange == FALSE )
	    setprop("/instrumentation/flightdirector/appr-on", OFF);
	else setprop("/instrumentation/flightdirector/appr-on", ON);
    }
    switchWithSound();
}

setlistener("/instrumentation/flightdirector/appr-on", func (n) {
    if (n.getValue() == ON)     engageAPPR();
    else        disengageAPPR();
}, 0, 0);


##
## +++++++++++++++++++++++++++++++ LATERAL MODE ++++++++++++++++++++++++++++++++
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

## Wing level mode
var toggle_wing_level = func() {
    var apOn	= fdAPEngage.getValue();
    var curHead = apLocksHdg.getValue();
    var mode    = fdLatMode.getValue();

    if ( apOn == OFF ) return;

    if (curHead == "wing-leveler") { # switch to heading mode (possibly)
	setprop("/controls/switches/heading-mode", ON);
	switchWithSound();
    } else {    # switch to wing-level mode
	setLNAV(LNAV.LEVEL);
    }
}

## Seleced Heading Mode
var toggle_bhdg = func() {
    var apOn	= fdAPEngage.getValue();
    var curHead = apLocksHdg.getValue();
    var mode    = fdLatMode.getValue();

    if ( apOn == OFF ) return;

    if (curHead == "dg-heading-hold") { # switch to wing-level mode (possibly)
	setprop("/controls/switches/heading-mode", OFF);
	switchWithSound();
    } else {	# switch to heading mode
	setLNAV(LNAV.HDG);
    }
}

## True Heading Mode
var toggle_thdg = func() {
    var apOn	= fdAPEngage.getValue();
    var curHead = apLocksHdg.getValue();

    if ( apOn == OFF ) return;

    if (curHead == "true-heading-hold") {
	unset_nav_mode();
    } else {
	setLNAV(LNAV.NAV);
    }
}

##
## ++++++++++++++++++++++++++++++ VERTICAL MODE ++++++++++++++++++++++++++++++++
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

##
## -------------------- Pitch --------------------
##

var toggle_ptch = func () {
    var apOn	= fdAPEngage.getValue();
    if ( apOn == OFF ) return;

    switchWithSound();
    if (apLocksAlt.getValue() == "pitch-hold") {
	setVNAV(VNAV.OFF);
    } else {
	setVNAV(VNAV.FPA);
    }
}


##
## -------------------- Altitude Hold --------------------
##

var toggle_alt = func() {
    var apOn = fdAPEngage.getValue();
    var mode = fdAltMode.getValue();

    if ( apOn == OFF or mode == MANAGED_MODE ) return;

    if (apLocksAlt.getValue() == "altitude-hold") {
	set_vs_mode();
    } else {
	setVNAV(VNAV.ALT);
    }
}

##
## -------------------- Vertical Speed Hold --------------------
##

var toggle_vfpm = func() {
    var apOn = fdAPEngage.getValue();
    var mode = fdVsMode.getValue();

    if ( apOn == OFF  or mode == MANAGED_MODE ) return;

    if (apLocksAlt.getValue() == "vertical-speed-hold") {
	set_alt_mode();
    } else {
	setVNAV(VNAV.VS);
    }
}

#
## +++++++++++++++++++++++++++++++ SPEED MODE ++++++++++++++++++++++++++++++++++
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

##
## The AP/FD vertical mode determines the associated A/THR mode:
##  * When an AP/FD vertical mode controls a speed or Mach target,
##    the A/THR mode controls thrust
##  * When an AP/FD vertical mode controls the vertical trajectory,
##    the A/THR mode controls a speed or Mach target.
##

#
## -------------------- Speed --------------------
##

## Mach  ~ Knots toggles are handled in "flightgear.nas"

## Set speed throttle mode
var set_spdthr = func() {
    var athrOn	= fdATEngage.getValue();
    var spd	= fdSPD.getValue();
    var spdMode = fdSpdMode.getValue();
    var spdPtch = spdPitchMode.getValue();

    # ignore managed modes or when the autothrottle is off
    if (athrOn == OFF or spdMode == MANAGED_MODE) return;

    # since only the selected modes are processed, we only need to change
    # if the mode is currently SPDPTCH
    if (spdPtch == ON)  reset_spd();
}

## Set speed with Pitch Mode
var set_spdptch = func() {
    var athrOn	= fdATEngage.getValue() or 0;
    var spd	= fdSPD.getValue();
    var spdMode = fdSpdMode.getValue();
    var spdPtch = spdPitchMode.getValue();

    # ignore managed modes or when the autothrottle is off
    if (athrOn == OFF or spdMode == MANAGED_MODE) return;

    # since only the selected modes are processed, we only need to change
    # if the mode is NOT currently SPDPTCH
    if (spdPtch == OFF)  reset_spd();
}


#############################################################################
# Physical buttons found on the control panel
#############################################################################

###
### Autopilot
### ----------

## operating the autopilot button

var turn_off_autopilot = func () {
    setprop("/controls/switches/autopilot", OFF);
    switchWithSound();
}

var turn_on_autopilot = func () {
    setprop("/controls/switches/autopilot", ON);
    switchWithSound();
}

## Toggle the AP switch
var toggle_autopilot = func () {
    var current = fdAPEngage.getValue();

    if ( current ) turn_off_autopilot();
    else         turn_on_autopilot();
}


## revert to OFF if the autopilot did not engage
var revert_ap_off = func () {
    var status = ctrlSwAP.getValue();
    if (status == OFF) return;

    # check autopilot in a sec
    var t = maketimer(1.0, func {
		var ap = fdAPEngage.getValue();
		if (ap != status)
		    setprop("/controls/switches/autopilot", ap);
	    });
    t.singleShot = TRUE;
    t.start();
}

## now listen to the autopilot switch and revert as necessary
setlistener("/controls/switches/autopilot", revert_ap_off, 0, 0);

###
### Heading switch (HDG/Level)
### --------------------------

## set heading mode
var set_heading_mode = func () {
    # HDG switch must be ON while NAV is OFF
    ctrlSwHdg.setBoolValue(ON);
    ctrlSwNav.setBoolValue(OFF);
    switchWithSound();
}

## set wing-level mode
var set_wl_mode = func () {
    # HDG switch must be OFF while NAV is OFF
    ctrlSwHdg.setBoolValue(OFF);
    ctrlSwNav.setBoolValue(OFF);
    switchWithSound();
}

###
### NAV switch (ON/OFF)
### -------------------

## set NAV mode (overriding both wing-level and heading mode)
var set_nav_mode = func () {
    ctrlSwNav.setBoolValue(ON);
    switchWithSound();
}

## unset NAV mode
var unset_nav_mode = func () {
    ctrlSwNav.setBoolValue(OFF);
    switchWithSound();
}

###
### Lateral mode synchronisation
### -----------------------------

var sync_lateral_mode = func () {
    var mode = fdPanelLat.getValue();
    var lnav = fdLNAV.getValue();

    if ( mode == lnav ) return;

    # convert LNAV to be the same as the switches determine
    setLNAV(mode);
}

setlistener("/instrumentation/flightdirector/panel-lat-mode", sync_lateral_mode, 0, 0);

###
### ALT switch (ALT/VS)
### -------------------

## set ALT mode
var set_alt_mode = func () {
    ctrlSwAlt.setBoolValue(ON);
    switchWithSound();
}

## set V/S mode
var set_vs_mode = func () {
    ctrlSwAlt.setBoolValue(OFF);
    switchWithSound();
}

###
### Vertical mode synchronisation
### -----------------------------

var sync_vertical_mode = func () {
    var mode = fdPanelVert.getValue();
    var vnav = fdVNAV.getValue();

    if ( mode == vnav ) return;

    # convert VNAV to be the same as the switche determines
    setVNAV(mode);
}

setlistener("/instrumentation/flightdirector/panel-vert-mode", sync_vertical_mode, 0, 0);


###
### IAS switch (ON/OFF)
### -------------------

## operating the autothrottle button

var turn_off_athr = func () {
    setprop("/controls/switches/autothrottle", OFF);
    switchWithSound();
}

var turn_on_athr= func () {
    setprop("/controls/switches/autothrottle", ON);
    switchWithSound();
}

## Toggle the autothrottle switch
var toggle_athr = func () {
    var current = fdATEngage.getValue();

    if ( current ) turn_off_athr();
    else         turn_on_athr();
}

## revert to OFF if the autothrottle did not engage
var revert_at_off = func () {
    var status = ctrlSwAT.getValue();
    if (status == OFF) return;

    # check autopilot in a sec
    var t = maketimer(1.0, func {
		var athr = fdATEngage.getValue();
		if (athr != status) {
		    setprop("/controls/switches/autothrottle", athr);
		    switchWithSound();
		}
	    });
    t.singleShot = TRUE;
    t.start();
}

## now listen to the autothrottle switch and revert as necessary
setlistener("/controls/switches/autothrottle", revert_at_off, 0, 0);


#############################################################################
# Settings adjustments that might be done from the dialog or control panel.
#############################################################################

##
## -------------------- Autopilot--------------------
##

## Call each of the modes to evaluate their new settings
var reevaluate_modes = func () {
    # NB: The engagement needs to be in the order: VNAV -> LNAV -> SPD
    # In particular, speed modes depend on VNAV and so must come last
    reset_vnav();
    reset_lnav();
    reset_spd();
}

## Tidy up parameters that might be left dangling when the AP is switched off
var tidy_up = func () {
    setprop("/instrumentation/flightdirector/alt-acquire-mode", OFF);
    setprop("/instrumentation/flightdirector/loc-on", OFF);
    setprop("/instrumentation/flightdirector/loc-arm", OFF);
    setprop("/instrumentation/flightdirector/loc-enable", OFF);
    setprop("/instrumentation/flightdirector/appr-on", OFF);
    setprop("/instrumentation/flightdirector/appr-arm", OFF);
    setprop("/instrumentation/flightdirector/appr-enable", OFF);
    setprop("/instrumentation/flightdirector/appr-arm", OFF);
    setprop("/autopilot/internal/variable-vs-enabled", OFF);
    setprop("/autopilot/internal/switch-to-alt-hold", OFF);
    setprop("/autopilot/internal/switch-to-alt-hold-near", OFF);
    setprop("/autopilot/internal/variable-vs-roc-lock", OFF);
    setprop("/autopilot/internal/waypoint-monitor-on", OFF);
    setprop("/autopilot/internal/waypoint-switch-on", OFF);
    setprop("/autopilot/internal/waypoint-nearby", OFF);
    setprop("/autopilot/internal/waypoint-valid", OFF);
}

# updates triggered when the master AP mode changes
var update_ap = func () {
    var status = fdAPEngage.getValue();

    if (status == OFF) {
	tidy_up();
    } else {
	setprop("/instrumentation/flightdirector/alt-acquire-mode", ON);
	# centre to flight controls
	centreFlightControls();
    }

    reevaluate_modes();
}

setlistener("/instrumentation/flightdirector/autopilot-engage", update_ap, 0, 0);

##
## -------------------- Autothrottle --------------------
##

## The A/T button will normally trigger an automatic change in
## "autothrottle-engage" under the right conditions. So we need to
## check that the change was accepted or revert the button otherwise.

var update_athr = func () {
    var engaged = fdATEngage.getValue();
    if ( engaged == OFF ) {	# reset speed modes
	setSPD(SPD.OFF);
    } else {
	# get new mode from evaluator
	reset_spd();
    }
}

## listener for autothrottle
setlistener("/instrumentation/flightdirector/autothrottle-engage", update_athr, 0, 0);


#############################################################################
# Additional utility buttons
#############################################################################

##
## -------------------- Heading Mode --------------------
## Cycle through lateral modes: none -> level -> heading -> nav -> none
## Do not change LOC, RWY, or TACAN
var cycle_heading = func {
    var lnav	= fdLNAV.getValue();
    var passive	= apLocksPassive.getValue() or 0;
    var newMode = lnav;

    # in fully passive mode, nothing is to be changed
    if ( passive == PassiveMode.ON ) return;

    if ( lnav == LNAV.OFF ) {   # next is wing-leveler
	newMode = LNAV.LEVEL;
    } elsif ( lnav == LNAV.LEVEL ) { # next is heading
	newMode = LNAV.HDG;
    } elsif ( lnav == LNAV.HDG ) { # next is NAV
	newMode = LNAV.NAV;
    } elsif ( lnav == LNAV.NAV ) { # reset heading mode
	newMode = LNAV.OFF;
    }

    setLNAV(newMode);
}

################################# END #######################################
